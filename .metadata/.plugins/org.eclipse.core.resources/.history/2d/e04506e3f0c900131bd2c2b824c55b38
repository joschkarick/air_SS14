'''
Created on Apr 15, 2014

@author: Joschka Rick
'''

import os
import numpy as np
import copy
from Tkinter import *


def enum(**enums):
    return type('Enum', (), enums)

MapState = enum(CLEAN=0, BLOCKED=1, DIRTY=2, START=3, VISITED=4)


class OccupancyMap(object):

    def __init__(self, map_matrix=None, path="maps/map1.txt"):
        if not map_matrix:
            self.parse_txt(path)
        else:
            self.__map_matrix = map_matrix.copy()
        self.__master = Tk()
        self.__canvas = Canvas(self.__master, width=100, height=100)
        self.__canvas.pack()
        self.draw_map()
        pass

    def get_start_pos(self):
        print str("yep").join(self.__map_matrix.shape)
        print tuple(np.argwhere(self.__map_matrix == 3)[0][0])
        return tuple(np.argwhere(self.__map_matrix == 3)[0][0])

    def set_tile(self, index, value):
        self.__map_matrix[index] = value

    def get_tile(self, index):
        return self.__map_matrix[index]

    def draw_map(self):
        self.__canvas.config(width=self.__map_matrix.shape[0], height=self.__map_matrix.shape[1])
        self.__canvas.delete()
        for row_i, row in enumerate(self.__map_matrix):
            for cell_i, cell in enumerate(row):
                self.__canvas.create_rectangle(row_i, cell_i, row_i+1, cell_i+1)
        self.__canvas.pack()

#         np.set_printoptions(threshold=np.NAN, linewidth=500, )
#         print ('\n'.join(''.join(str(cell) for cell in row)
#                          for row in self.__map_matrix)) \
#             .replace(' ', '') \
#             .replace('[', '') \
#             .replace(']', '') \
#             .replace('0', ' ') \
#             .replace('4', '.')

    def parse_txt(self, path):
        map_file = open(path, 'r')

        map_array = [list(
                          line.replace('\n', '') \
                          .replace(' ', str(MapState.CLEAN)) \
                          .replace('|', str(MapState.BLOCKED)) \
                          .replace('=', str(MapState.BLOCKED)) \
                          .replace('*', str(MapState.DIRTY)) \
                          .replace('s', str(MapState.START))
                          ) for line in map_file]

        self.__map_matrix = np.matrix(map_array, dtype=np.int)

